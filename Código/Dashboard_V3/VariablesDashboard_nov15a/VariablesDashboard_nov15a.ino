#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/dc9e4383-41c4-48ff-9c1f-125bd1e4ed3b 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float pressure;
  int terrain;
  bool high_pressure;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

//CAN libraries
#include <mcp_can.h>
#include <SPI.h>
#include <Streaming.h>

//Dashboard
#include "thingProperties.h"

/* MCP2515 definitions */
#define CAN_ID_EXTENDED 1
#define WS_BUFFER_SIZE  13
#define PGN  0x04FEF9A3
// CAN TX Variables
unsigned long txId = 0;
unsigned char txLen = 0;
unsigned char txBuf[8];
unsigned long prevTX = 0;                                        // Variable to store last execution time
const unsigned int invlTX = 1000;                                // One second interval constant
byte data[] = {terrain, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};  // Generic CAN data to send
// CAN RX Variables
unsigned long rxId;
unsigned char len;
unsigned char rxBuf[8];
unsigned char rxMsgBuffer[WS_BUFFER_SIZE];
// CAN0 INT and CS
#ifdef ARDUINO_ARCH_ESP32
#define CAN0_INT  21                            // Set INT to pin 2 on ESP32
MCP_CAN CAN0(5);                                // Set CS to pin 5 on ESP32
#else
#define CAN0_INT  4                             // Set INT to pin 2 on ESP8266
MCP_CAN CAN0(15);                               // Set CS to pin 15 on ESP8266
#endif
//Variables
int tmpPressure;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  //CAN setup
  if(CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK)
    Serial.println("MCP2515 Initialized Successfully!");
  else
    Serial.println("Error Initializing MCP2515...");
  
  // Set NORMAL mode
  CAN0.setMode(MCP_NORMAL);

  pinMode(CAN0_INT, INPUT);                           // Configuring pin for /INT input
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  //CAN
  if(!digitalRead(CAN0_INT))                          // If CAN0_INT pin is low, read receive buffer
  {
    CAN0.readMsgBuf(&rxId, &len, rxBuf);              // Read data: len = data length, buf = data byte(s)
    pressure = int(rxBuf[0]);
  }
  
  if(pressure > tmpPressure)
    high_pressure=true;
  else
    high_pressure=false;
  
  byte sndStat = CAN0.sendMsgBuf(PGN,1, 8, data);
  delay(100);
  
}



/*
  Since Terrain is READ_WRITE variable, onTerrainChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTerrainChange()  {
  // Add your code here to act upon Terrain change
  switch(terrain){
    case 1:
      data[0] = 6;
      tmpPressure = 6;
      break;
    case 2:
      data[0] = 12;
      tmpPressure = 12;
      break;
    case 3:
      data[0] = 18;
      tmpPressure = 18;
      break;
    case 4:
      data[0] = 24;
      tmpPressure = 24;
      break;
  }
  
  Serial.print("Cambio de presión\n");
  
}




